/*
//题目描述
	//输入一个复杂链表（每个节点中有节点值，以及两个指针，
	//一个指向下一个节点，另一个特殊指针指向任意一个节点），
	//返回结果为复制后复杂链表的head。
	//（注意，输出结果中请不要返回参数中的节点引用，否则判题程序会直接返回空）
	struct RandomListNode {
    	int label;
    	struct RandomListNode *next, *random;
    	RandomListNode(int x) :
            label(x), next(NULL), random(NULL) {
		}
	};
class Solution {
public:
RandomListNode* Clone(RandomListNode* pHead){
        if(pHead==NULL) return NULL;
		RandomListNode* currentNode=pHead;
		//复制每个结点，将其插入结点后面
		while(currentNode!=NULL){
			RandomListNode* cloneNode = new RandomListNode(currentNode->label);
			RandomListNode* nextNode = currentNode->next;
			currentNode->next=cloneNode;
			cloneNode->next=nextNode;
			currentNode=nextNode;
		}
		currentNode=pHead;
		//复制老结点的随机指针给新结点
		while(currentNode!=NULL){
			currentNode->next->random = currentNode->random==NULL?NULL:currentNode->random->next;
			currentNode=currentNode->next->next;
		}
		//拆分链表
		currentNode=pHead;
		RandomListNode* pCloneHead=pHead->next;
		while(currentNode!=NULL){
			RandomListNode* cloneNode=currentNode->next;
			currentNode->next=cloneNode->next;
			cloneNode->next=cloneNode->next==NULL?NULL:cloneNode->next->next;
			currentNode=currentNode->next;
		}
		return pCloneHead;
    }
};
