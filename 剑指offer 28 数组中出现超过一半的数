//题目描述
	//数组中有一个数字出现的次数超过数组长度的一半，请找出这个数字。
	//例如输入一个长度为9的数组{1,2,3,2,2,2,5,4,2}。
	//由于数字2在数组中出现了5次，超过数组长度的一半，因此输出2。
	//如果不存在则输出0。
    // O(n) 空间O(n) 不追求元素排序，不用map或者hashmap
	int MoreThanHalfNum_Solution2(vector<int> numbers) {
        int n = numbers.size();
        //map 记录出现次数
        unordered_map<int, int> m;
        int count;
        for (int i = 0; i < n; i++) {
            count = ++m[numbers[i]];
            if (count > n/2) return numbers[i];
        }
        return 0;
    }
	// O(n) O(1)
	int MoreThanHalfNum_Solution1(vector<int> numbers) {
        if(numbers.empty()) return 0;
		int n = numbers.size(), num=numbers[0],count=1;
        for (int i = 1; i < n; i++) {
            if(numbers[i]==num) count++;
			else count--;
			if(count==0){
				num=numbers[i];
                count=1;
			}
        }
		count=0;
		for(int i=0;i<n;i++){
			if(numbers[i]==num) count++;
		}
        return (count>n/2)?num:0;
    }
	//快排思想 O(n)?O(logn)?
	int MoreThanHalfNum_Solution(vector<int> numbers) {
        if(numbers.empty()) return 0;
		int n = numbers.size(), mid=n/2,count=1;
		int start=0,end=n-1;
        int k=partition(numbers, 0, n-1);
		while(k!=mid){
			cout<<k<<endl;
			if(k>mid){
				end=k-1;
				k=partition(numbers, start, end);
			}
			else{
				start=k+1;
				k=partition(numbers, start, end);
			}
		}
		int num=numbers[mid];
		count=0;
		for(int i=0;i<n;i++){
			if(numbers[i]==num) count++;
		}
        return (count>n/2)?num:0;
    }
	int partition(vector<int> &numbers, int s, int e){
		int pivot=numbers[s];
		int leftmark=s+1, rightmark=e;
		bool done=false;
		while(!done){
			cout<<leftmark<<" "<<rightmark<<endl;
			while(leftmark<=rightmark && pivot>=numbers[leftmark]) leftmark++;
			while(leftmark<=rightmark && pivot<=numbers[rightmark]) rightmark--;
			if(leftmark>rightmark) done=true;
			else{
				swap(numbers, leftmark, rightmark);
			}
		}
		swap(numbers, s, rightmark);
		return rightmark;
	}
	void swap(vector<int> &v, int s, int e){
		int tmp=v[s];
		v[s]=v[e];
		v[e]=tmp;
	}
