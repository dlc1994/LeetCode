//约瑟夫圆环。一个数m,编号为0开始报数，m-1的出列，下一个继续从0开始，直至最后一个。
int LastRemaining_Solution(int n, int m) {
  if(n==0 || m<=0) return -1;
  if (n==1) return 0;
  vector<int> v;
  for (int i=0;i<n;i++) {
    v.push_back(i);
  }
  int p = 0;
  while(v.size()>1) {
    n = v.size();
    p = (p+m) % n - 1;
    if (p == -1) p = n-1;
    v.erase(v.begin()+p);
  }
  return v[0];
  }
//公式dp
  int LastRemaining_Solution1(unsigned int n, unsigned int m)
  {

      if(n <= 0 && m <= 0) return -1; //蛋疼的特殊条件
      int t = 0;
      for(int i = 2; i <= n; i++)
          t = (t + m) % i;
      return t;
  }
//模拟循环链表
  int LastRemaining_Solution2(int n, int m)//n为人数
  {
      if(n<1||m<1)
          return -1;
      list<int> numbers;
      for(int i=0;i<n;i++)
          numbers.push_back(i);
      list<int>::iterator current=numbers.begin();
      while(numbers.size()>1)
      {
          for(int i=1;i<m;i++)//走m-1步到达第m个数处
          {
              ++current;
              if(current==numbers.end())
                  current=numbers.begin();
          }

          list<int>::iterator next=++current;
          if(next==numbers.end())
              next=numbers.begin();
          --current;
          numbers.erase(current);
          current=next;
      }
      return *current;//对迭代器取值，等价于对指针取值
  }
