//在一个长度为n的数组里的所有数字都在0到n-1的范围内。
	//数组中某些数字是重复的，但不知道有几个数字是重复的。
	//也不知道每个数字重复几次。请找出数组中任意一个重复的数字。 
	//例如，如果输入长度为7的数组{2,3,1,0,2,5,3}，那么对应的输出是第一个重复的数字2。
	// Parameters:
    //        numbers:     an array of integers
    //        length:      the length of array numbers
    //        duplication: (Output) the duplicated number in the array number
    bool duplicate1(int numbers[], int length, int* duplication) {
		bool res=false;
		if(length==0) return res;
		unordered_map<int, int> mp;
		for(int i=0;i<length;i++) {
			if (mp.count(numbers[i])==0) {
				mp[numbers[i]] ++;
			}
			else {
				*duplication = numbers[i];
				res = true;
				break;
			}
		}
		return res;
    }
	//思路二：剑指offer中解法：因为数组中数字都在0~n - 1，所以若无重复数字排好序则数字i将出现在下标i的位置。
	//解法：从头到尾扫描这个数组，当扫描到下标为i的数字m时，先比较这个数字是否等于i，是则扫描下一个数字，否则
	//将该数字与下标为m的数字进行比较，若相等，则找到一个重复的数字，否则将两个数字交换，并继续对该位置
	//（下标i）重复上面比较过程。
	bool duplicate(int numbers[], int length, int* duplication) {
		bool res = false;
		if (length == 0) return res;
		int i = 0;
		while(i<length) {
			if (numbers[i] == i) {
				i++;
				continue;
			}
			if (numbers[numbers[i]] == numbers[i]) {
				res = true;
				*duplication = numbers[i];
				break;
			}
			else {
				int tmp = numbers[i];
				numbers[i] = numbers[tmp];
				numbers[tmp] = tmp;
			}
		}
		return res;
	}
