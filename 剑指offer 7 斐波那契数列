//斐波那契数列
0 1 2 3 4 ...
0 1 1 2 3 ...

//递归
class Solution {
public:
    int Fibonacci(int n) {
        if(n==0) return 0;
        if(n==1) return 1;
        return Fibonacci(n-1)+Fibonacci(n-2);
    }
};
//循环 时间复杂度O(N) 空间复杂度O(1)
class Solution {
public:
    int Fibonacci(int n) {
        if(n==0) return 0;
        if(n==1) return 1;
        int pre=0, now=1;
        while(n>1){
            int tmp = pre+now;
            pre = now;
            now = tmp;
            n--;
        }
        return now;
    }
};

//动态规划 时间复杂度O(N) 空间复杂度O(N)
class Solution {
public:
    int Fibonacci(int n) {
        if(n==0) return 0;
        if(n==1) return 1;
		vector<int> dp(n+1,0);
		dp[0]=0;
		dp[1]=1;
		for(int i=2;i<=n;++i){
			dp[i]=dp[i-1]+dp[i-2];
		}
        return dp[n];
    }
};
