//DP O(n) O(n)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.size()==0) return 0;
        vector<int> dp(nums.size(),0);
        int maxVal = nums[0];
        dp[0] = nums[0];
        for(int i=1;i<nums.size();++i){
            if(dp[i-1]<0) dp[i]=nums[i];
            else dp[i] = dp[i-1]+nums[i];
            if(dp[i]>maxVal) maxVal = dp[i];
        }
        return maxVal;
    }
};

//DP O(n) O(1)
class Solution {
public:
    int maxSubArray(vector<int>& nums) {
        if(nums.empty()) return 0;
        int len = nums.size();
        int sum = 0;
        int Max = INT_MIN;
        for(int i=0;i<len;i++)
        {
            if(sum < 0) sum = nums[i];
            else sum += nums[i];
            Max = max(sum,Max);
        }
        return Max;
    }
};
